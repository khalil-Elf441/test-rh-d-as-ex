
{
  "examId": "ex316-1",
  "title": "OpenShift Virtualization Specialist (EX316) â€” Mock 1: Core Skills",
  "description": "This exam focuses on core skills including Operator deployment, VM provisioning, and basic network and storage configuration.",
  "timeLimit": "4 hours",
  "tasks": [
    {
      "id": "task01",
      "title": "Deploy the OpenShift Virtualization Operator",
      "sections": [
        {
          "title": "Operator Installation",
          "notice": "Deploy the Operator using OLM into the recommended default namespace.",
          "subtasks": [
            "Find and install the 'OpenShift Virtualization' Operator from OperatorHub.",
            "Ensure the installation targets the 'openshift-cnv' namespace.",
            "Wait for the Operator installation to succeed."
          ]
        },
        {
          "title": "Activate Virtualization Components",
          "notice": "Create the necessary Custom Resource to enable virtualization features on the cluster.",
          "subtasks": [
            "Create a 'HyperConverged' custom resource in the 'openshift-cnv' namespace.",
            "Accept all the default settings for the HyperConverged resource.",
            "Verify that all pods related to OpenShift Virtualization are running correctly before proceeding."
          ]
        }
      ]
    },
    {
      "id": "task02",
      "title": "Provision a RHEL9 VM for a database server",
      "sections": [
        {
          "title": "VM Creation from Template",
          "notice": "Use the official RHEL9 template to create a new VM named 'db-vm'.",
          "subtasks": [
            "Find the common template for Red Hat Enterprise Linux 9.",
            "Provision a new VirtualMachine named 'db-vm' from this template.",
            "Customize the VM to have 2 CPUs and 3Gi of memory.",
            "Ensure the VM uses a disk of size 25Gi."
          ]
        }
      ]
    },
    {
      "id": "task03",
      "title": "Perform basic system administration on 'db-vm'",
      "sections": [
        {
          "title": "Package Installation and Service Management",
          "notice": "Access the VM and install and enable a database service.",
          "subtasks": [
            "Access the serial console of 'db-vm'.",
            "Install the 'mariadb-server' package using DNF.",
            "Enable the 'mariadb' service to start at boot time.",
            "Start the 'mariadb' service."
          ]
        }
      ]
    },
    {
      "id": "task04",
      "title": "Configure a Kubernetes Service for the database VM",
      "sections": [
        {
          "title": "Expose VM via ClusterIP Service",
          "notice": "Make the MariaDB service on 'db-vm' available to other pods in the cluster.",
          "subtasks": [
            "Create a Service named 'db-service' of type ClusterIP.",
            "Configure the service to select the 'db-vm' virtual machine.",
            "Forward traffic from the service on port 3306 to the VM's port 3306."
          ]
        }
      ]
    },
    {
      "id": "task05",
      "title": "Provision a web server VM with cloud-init customization",
      "sections": [
        {
          "title": "VM Provisioning with Cloud-Init",
          "notice": "Deploy a VM named 'web-vm' and use cloud-init to pre-configure it.",
          "subtasks": [
            "Create a new VM named 'web-vm' from the RHEL9 template.",
            "Use cloud-init user data to set the hostname to 'web-vm.example.com'.",
            "Use cloud-init to install the 'nginx' package.",
            "Use cloud-init to enable and start the 'nginx' service."
          ]
        }
      ]
    },
    {
      "id": "task06",
      "title": "Create a NetworkPolicy for the database VM",
      "sections": [
        {
          "title": "Secure VM with Network Policy",
          "notice": "Create a policy that only allows traffic to 'db-vm' from 'web-vm'.",
          "subtasks": [
            "Ensure both 'db-vm' and 'web-vm' have appropriate labels (e.g., 'app=db' and 'app=web').",
            "Create a NetworkPolicy named 'db-access-policy'.",
            "The policy should apply to pods with the 'app=db' label.",
            "Define an ingress rule that allows traffic on port 3306 only from pods with the 'app=web' label."
          ]
        }
      ]
    },
    {
      "id": "task07",
      "title": "Attach a new persistent disk to 'db-vm'",
      "sections": [
        {
          "title": "Add and Configure Persistent Storage",
          "notice": "Add a 10Gi disk to the database VM for storing data.",
          "subtasks": [
            "Create a new PersistentVolumeClaim named 'db-data-pvc' with a size of 10Gi.",
            "Ensure the PVC uses a StorageClass that supports ReadWriteOnce (RWO) access.",
            "Add the new PVC as a data volume to the 'db-vm' VirtualMachine.",
            "Verify the new disk is visible as a block device inside the VM."
          ]
        }
      ]
    },
    {
      "id": "task08",
      "title": "Detach a disk from 'web-vm'",
      "sections": [
        {
          "title": "Modify VM Storage",
          "notice": "The 'web-vm' was created with an extra, unnecessary disk. Remove it.",
          "subtasks": [
            "First, add a new 5Gi data volume to 'web-vm' named 'extra-disk'.",
            "After the disk is added, shut down the 'web-vm'.",
            "Remove the 'extra-disk' data volume from the 'web-vm' definition.",
            "Start the VM and verify the disk has been removed."
          ]
        }
      ]
    },
    {
      "id": "task09",
      "title": "Create a snapshot of the 'web-vm'",
      "sections": [
        {
          "title": "VM Snapshot",
          "notice": "Take a snapshot of the 'web-vm' before applying updates.",
          "subtasks": [
            "Create a VirtualMachineSnapshot resource named 'web-vm-snapshot-v1'.",
            "Ensure the snapshot targets the 'web-vm' VM.",
            "Wait for the snapshot operation to complete and for the 'readyToUse' status to be true."
          ]
        }
      ]
    },
    {
      "id": "task10",
      "title": "Restore 'web-vm' from its snapshot",
      "sections": [
        {
          "title": "VM Restore",
          "notice": "A faulty update was applied to 'web-vm'. Revert it to its previous state.",
          "subtasks": [
            "Create a VirtualMachineRestore resource named 'web-vm-restore-v1'.",
            "Configure the restore to use the 'web-vm-snapshot-v1' as its source.",
            "Verify the VM is reverted to its previous state."
          ]
        }
      ]
    },
    {
      "id": "task11",
      "title": "Clone the 'db-vm' for a new staging environment",
      "sections": [
        {
          "title": "VM Cloning",
          "notice": "Create a full clone of the database VM named 'db-vm-staging'.",
          "subtasks": [
            "Prepare the 'db-vm' for cloning if necessary.",
            "Create a clone of 'db-vm' using the OpenShift web console or CLI.",
            "Name the new VM 'db-vm-staging'.",
            "Verify the clone is created and starts successfully."
          ]
        }
      ]
    },
    {
      "id": 'task12',
      "title": "Configure a NodePort service for the web server",
      "sections": [
        {
          "title": "External Access via NodePort",
          "notice": "Expose the 'web-vm' externally using a NodePort service.",
          "subtasks": [
            "Create a new Service named 'web-svc-external'.",
            "Set the service type to NodePort.",
            "Select the 'web-vm' and map service port 8080 to the VM's Nginx port 80.",
            "Identify the assigned NodePort and verify you can access the web server from outside the cluster."
          ]
        }
      ]
    },
    {
      "id": "task13",
      "title": "Configure a health probe for 'web-vm'",
      "sections": [
        {
          "title": "Liveness Probe",
          "notice": "Ensure the 'web-vm' is automatically restarted if its web server crashes.",
          "subtasks": [
            "Edit the 'web-vm' VirtualMachine resource.",
            "Add a liveness probe to the VM definition.",
            "Configure the probe to perform an HTTP GET request on port 80.",
            "Set an appropriate initial delay and failure threshold."
          ]
        }
      ]
    },
    {
      "id": "task14",
      "title": "Use a custom template to deploy a VM",
      "sections": [
        {
          "title": "Generate and Use a Custom Template",
          "notice": "Generate a template from 'web-vm' and use it to deploy another VM.",
          "subtasks": [
            "Generate a custom template named 'nginx-template' from the configured 'web-vm'.",
            "Modify the template to allow the VM name to be customized via a parameter.",
            "Use the new 'nginx-template' to provision a new VM named 'web-vm-2'."
          ]
        }
      ]
    },
    {
      "id": "task15",
      "title": "Assign 'web-vm-2' to a specific node",
      "sections": [
        {
          "title": "Node Affinity",
          "notice": "Ensure the 'web-vm-2' only runs on a worker node with a specific label.",
          "subtasks": [
            "Select a worker node and add a label 'region=primary' to it.",
            "Edit the 'web-vm-2' VirtualMachine resource.",
            "Add a node selector to the VM spec that targets the 'region=primary' label.",
            "Verify the VM is scheduled and running on the correct node."
          ]
        }
      ]
    }
  ]
}
